pipeline {
    agent any

    environment {
        // ✅ 设置镜像名和容器名（这里是 snapbite-nginx）
        IMAGE_NAME = "lasa1015/snapbite-nginx:latest"
        CONTAINER_NAME = "snapbite-nginx"
    }

    tools {
        // ✅ Jenkins 中预先配置的 Node.js 名称
        nodejs "nodejs"
    }

    stages {


        stage('Check Changes') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD | grep '^nginx/' || true", returnStdout: true).trim()
                    if (!changes) {
                        echo "🔁 No changes in nginx, skipping build..."
                        currentBuild.result = 'NOT_BUILT'
                        error('No changes detected, aborting build.')
                    }
                }
            }
        }


        stage('Checkout Code') {
            steps {
                // ✅ 清空 Jenkins 工作区，防止旧文件冲突
                deleteDir()
                // ✅ 拉取 GitHub 主分支最新代码
                git branch: 'main',
                    url: 'https://github.com/lasa1015/snapbite-microservices-platform.git'
            }
        }

        stage('Build Frontend') {
            steps {
                // ✅ 进入 frontend 目录，安装依赖并构建前端，输出至 nginx/frontend-dist
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                // ✅ 构建 Nginx 镜像（会打包前端静态资源）
                dir('nginx') {
                    sh 'docker build -t $IMAGE_NAME .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                // ✅ 登录 Docker Hub 并推送镜像
                withCredentials([
                    usernamePassword(
                        credentialsId: 'docker-username',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DUMMY'
                    ),
                    string(
                        credentialsId: 'docker-password',
                        variable: 'DOCKER_TOKEN'
                    )
                ]) {
                    sh '''
                        echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $IMAGE_NAME
                    '''
                }
            }
        }

        stage('Clean Up Dangling Images') {
            steps {
                // ✅ 清理悬空无标签镜像，节省磁盘空间
                sh '''
                    echo "🧼 清理悬空旧镜像..."
                    docker image prune -f
                '''
            }
        }
    }

    post {
        success {
            // ✅ 构建成功后自动触发统一部署任务
            build job: 'deploy-snapbite-services', wait: false
        }
    }
}
